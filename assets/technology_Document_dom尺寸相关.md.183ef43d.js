import{_ as e,c as t,o as l,N as o}from"./chunks/framework.cd9250a1.js";const a="/images/tech/scroll001.png",s="/images/tech/w3c001.png",b=JSON.parse('{"title":"Dom 尺寸相关属性详解","description":"","frontmatter":{},"headers":[],"relativePath":"technology/Document/dom尺寸相关.md"}'),i={name:"technology/Document/dom尺寸相关.md"},n=o(`<h1 id="dom-尺寸相关属性详解" tabindex="-1">Dom 尺寸相关属性详解 <a class="header-anchor" href="#dom-尺寸相关属性详解" aria-label="Permalink to &quot;Dom 尺寸相关属性详解&quot;">​</a></h1><h2 id="clientwidth-scrollwidth-offsetwidth-innerwidth" tabindex="-1">clientWidth，scrollWidth，offsetWidth，innerWidth <a class="header-anchor" href="#clientwidth-scrollwidth-offsetwidth-innerwidth" aria-label="Permalink to &quot;clientWidth，scrollWidth，offsetWidth，innerWidth&quot;">​</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">innerWidth：浏览器窗口的内部宽度</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">clientWidth：用来获取元素的宽高，不包含元素的border。元素的width+padding</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">scrollWidth：获取网页内容宽度</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">scrollWidth=元素的width+padding</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="client-家族" tabindex="-1">client 家族 <a class="header-anchor" href="#client-家族" aria-label="Permalink to &quot;client 家族&quot;">​</a></h2><h3 id="clientx-clienty" tabindex="-1">clientX &amp; clientY <a class="header-anchor" href="#clientx-clienty" aria-label="Permalink to &quot;clientX &amp; clientY&quot;">​</a></h3><ul><li><strong>clientX</strong>：当事件被触发时鼠标指针相对于浏览器页面（或客户区）的水平坐标;</li><li><strong>clientY</strong>：当鼠标事件发生时，鼠标相对于浏览器（这里说的是浏览器的有效区域）y轴的位置；</li></ul><h3 id="clientwidth-clientheight" tabindex="-1">clientWidth &amp; clientHeight <a class="header-anchor" href="#clientwidth-clientheight" aria-label="Permalink to &quot;clientWidth &amp; clientHeight&quot;">​</a></h3><ul><li><strong>clientWidth</strong> 返回该元素的像素宽度，宽度包含内边距（padding），<strong>不包含边框（border），外边距（margin）和滚动条</strong>，是一个整数，单位是像素 px。</li><li><strong>clientHeight</strong> 返回该元素的像素高度，高度包含内边距（padding），<strong>不包含边框（border），外边距（margin）和滚动条</strong>，是一个整数，单位是像素 px。</li></ul><h3 id="clienttop-clientleft" tabindex="-1">clientTop &amp; clientLeft <a class="header-anchor" href="#clienttop-clientleft" aria-label="Permalink to &quot;clientTop &amp; clientLeft&quot;">​</a></h3><ul><li><p><strong>clientTop</strong> 表示一个元素的顶部边框的宽度，以像素表示。<code>clientTop</code> 不包括左外边距和左内边距。</p></li><li><p><strong>clientLeft</strong> 表示一个元素的左边框的宽度，以像素表示。如果元素的文本方向是从右向左（RTL, right-to-left），并且由于内容溢出导致左边出现了一个垂直滚动条，则该属性包括滚动条的宽度。 <code>clientLeft</code> 不包括左外边距和左内边距。</p></li></ul><h2 id="screen-家族" tabindex="-1">screen 家族 <a class="header-anchor" href="#screen-家族" aria-label="Permalink to &quot;screen 家族&quot;">​</a></h2><h3 id="screenx-screeny" tabindex="-1">screenX &amp; screenY <a class="header-anchor" href="#screenx-screeny" aria-label="Permalink to &quot;screenX &amp; screenY&quot;">​</a></h3><ul><li><strong>screenX</strong>：当鼠标事件发生时，鼠标相对于显示器屏幕x轴的位置；</li><li><strong>screenY</strong>：当鼠标事件发生时，鼠标相对于显示器屏幕y轴的位置；</li></ul><h2 id="offset-家族" tabindex="-1">offset 家族 <a class="header-anchor" href="#offset-家族" aria-label="Permalink to &quot;offset 家族&quot;">​</a></h2><h3 id="offsetx-offsety" tabindex="-1">offsetX &amp; offsetY <a class="header-anchor" href="#offsetx-offsety" aria-label="Permalink to &quot;offsetX &amp; offsetY&quot;">​</a></h3><ul><li><strong>offsetX</strong>：当鼠标事件发生时，鼠标相对于事件源x轴的位置</li><li><strong>offsetY</strong>：当鼠标事件发生时，鼠标相对于事件源y轴的位置</li></ul><h3 id="offsettop-offsetleft" tabindex="-1">offsetTop &amp; offsetLeft <a class="header-anchor" href="#offsettop-offsetleft" aria-label="Permalink to &quot;offsetTop &amp; offsetLeft&quot;">​</a></h3><p><code>offsetTop</code> 和 <code>offsetLeft</code> 相对于最近的祖先定位元素。也就是鼠标点击的位置到相对元素边框的距离。</p><h3 id="offsetwidth-offsetheight" tabindex="-1">offsetWidth &amp; offsetHeight <a class="header-anchor" href="#offsetwidth-offsetheight" aria-label="Permalink to &quot;offsetWidth &amp; offsetHeight&quot;">​</a></h3><p>使用 <code>offsetHeight</code> 和 <code>offsettWidth</code> 属性返回元素的可见高度和宽度，包括<strong>内边距（padding）和边框（border）</strong>。</p><h2 id="scroll-家族" tabindex="-1">scroll 家族 <a class="header-anchor" href="#scroll-家族" aria-label="Permalink to &quot;scroll 家族&quot;">​</a></h2><h3 id="scrolltop-scrollleft" tabindex="-1">scrollTop &amp; scrollLeft <a class="header-anchor" href="#scrolltop-scrollleft" aria-label="Permalink to &quot;scrollTop &amp; scrollLeft&quot;">​</a></h3><ul><li><strong>scrollTop</strong> 属性可以获取或设置一个元素的内容垂直滚动的像素数。</li></ul><p>一个元素的 scrollTop 值是这个元素的内容顶部（卷起来的）到它的视口可见内容（的顶部）的距离的度量。当一个元素的内容没有产生垂直方向的滚动条，那么它的 scrollTop 值为0。</p><ul><li><strong>scrollLeft</strong> 属性可以读取或设置元素滚动条到元素左边的距离。</li></ul><p>注意如果这个元素的内容排列方向（direction）是rtl (right-to-left) ，那么滚动条会位于最右侧（内容开始处），并且scrollLeft值为 0。此时，当你从右到左拖动滚动条时，scrollLeft 会从 0 变为负数。</p><h3 id="scrollwidth-scrollheight" tabindex="-1">scrollWidth &amp; scrollHeight <a class="header-anchor" href="#scrollwidth-scrollheight" aria-label="Permalink to &quot;scrollWidth &amp; scrollHeight&quot;">​</a></h3><ul><li><strong>scrollWidth</strong> 返回该元素的像素宽度，高度包含内边距（padding），不包含外边距（margin）、边框（border），是一个整数，单位是像素 px。 <img src="`+a+'"></li></ul><img src="'+s+'">',29),r=[n];function c(h,d,f,p,g,m){return l(),t("div",null,r)}const _=e(i,[["render",c]]);export{b as __pageData,_ as default};
